import axios from "axios";

const API_BASE_URL = "http://localhost:8080";

// Users
export const getUsers = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/customer`);
    console.log("API Response (Get Users):", response.data); // In to√†n b·ªô d·ªØ li·ªáu ng∆∞·ªùi d√πng nh·∫≠n ƒë∆∞·ª£c
    return response.data;
  } catch (error) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng");
  }
};

export const postUsers = async (formData) => {
  console.log("Form data being sent to API:", formData);
  try {
    const response = await axios.post(`${API_BASE_URL}/customer/create`, {
      phoneNumber: formData.phoneNumber,
      firstName: formData.firstName,
      lastName: formData.lastName,
      dob: formData.dob,
      gender: formData.gender,
      password: formData.password,
      address: formData.address,
      banking: formData.banking,
      email: formData.email,
    });
    console.log("API Response Status:", response.status);
    console.log("API Response Data:", response.data);

    if (response.status === 200) {
      return { success: true, message: "ƒêƒÉng k√Ω th√†nh c√¥ng" };
    } else {
      return {
        success: false,
        message: "ƒêƒÉng k√Ω th·∫•t b·∫°i",
      };
    }
  } catch (error) {
    console.error("Error during registration:", error);

    if (error.response) {
      console.error("Error response status:", error.response.status);
      console.error("Error response data:", error.response.data);

      // Ki·ªÉm tra l·ªói c·ª• th·ªÉ t·ª´ backend (email ƒë√£ t·ªìn t·∫°i)
      if (error.response.data && error.response.data === "Email is exist") {
        return {
          success: false,
          message: "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng", // Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói c·ª• th·ªÉ
        };
      }

      return {
        success: false,
        message:
          error.response.data ||
          "G·ª≠i bi·ªÉu m·∫´u kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.",
      };
    }

    return {
      success: false,
      message: "G·ª≠i bi·ªÉu m·∫´u kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.",
    };
  }
};

// Child
export const getChilds = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/child`);
    console.log("API Response (Get Childs):", response.data);
    return response.data;
  } catch (error) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng");
  }
};

//Customers
export const getCustomerId = async (customerId) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/customer/findid`, {
      params: { id: customerId },
    });
    console.log("üì° API Response (getCustomer by Id):", response.data);
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin kh√°ch h√†ng:", error);
    return null;
  }
};

//Vaccine
export const getVaccines = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/vaccine`);
    console.log("API Response (Get Vaccines):", response.data);
    return response.data;
  } catch (error) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng");
  }
};

export const getVaccineDetail = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/vaccinedetail`);
    console.log("day la get vaccinedetail");
    console.log("API Response (Get VaccineDetails):", response.data);
    return response.data;
  } catch (error) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng");
  }
};

export const getVaccinesByAge = async (ageMin, ageMax) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/vaccine/findbyage`, {
      params: {
        ageMin,
        ageMax,
      },
    });
    console.log("API Response (Get Vaccines by Age):", response.data);
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API:", error.message);
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng");
  }
};

export const getVaccineCombos = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/vaccinecombo`);
    console.log("API Response (Get VaccineCombos):", response.data);
    return response.data;
  } catch (error) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng");
  }
};

export const getVaccineDetailByVaccineId = async (vaccineId) => {
  try {
    const response = await axios.get(
      `${API_BASE_URL}/vaccinedetail/findbyvaccine`,
      {
        params: { id: vaccineId },
      }
    );
    console.log(
      "API Response (Get VaccneDetail by Vaccine Id):",
      response.data
    );
    return response.data;
  } catch (error) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng");
  }
};
// Bookings
export const getBookingDetails = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/bookingdetail`);
    console.log("API Response (Get BookingDetails):", response.data); // In to√†n b·ªô d·ªØ li·ªáu ng∆∞·ªùi d√πng nh·∫≠n ƒë∆∞·ª£c
    return response.data;
  } catch (error) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng");
  }
};

export const getBookingDetailsByBookID = async (bookingId) => {
  try {
    const response = await axios.get(
      `${API_BASE_URL}/bookingdetail/findbybooking`,
      {
        params: { id: bookingId }, // Truy·ªÅn ID qua query
      }
    );

    console.log(
      "üì° API Response (get Booking Details by BookingId):",
      response.data
    );
    return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu customerID
  } catch (error) {
    console.error(" L·ªói khi l·∫•y customer ID:", error);
    return null; // Tr·∫£ v·ªÅ null n·∫øu l·ªói
  }
};

export const getBookingByCustomerId = async (customerId) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/booking/findbycustomer`, {
      params: { customerId },
    });

    console.log("üì° API Response (getCustomerID):", response.data);
    return response.data;
  } catch (error) {
    console.error(" L·ªói khi l·∫•y customer ID:", error);
    return null;
  }
};

export const postSchedules = async (formData) => {
  try {
    const response = await axios.post(
      `${API_BASE_URL}/booking/create`,
      formData
    );

    console.log("‚úÖ API Response Status:", response.status);
    console.log("‚úÖ API Response Data: Booking post schedule:", response.data);

    // Generalized success check for any 2xx status codes
    if (response.status >= 200 && response.status < 250) {
      return { success: true, message: "ƒê·∫∑t l·ªãch th√†nh c√¥ng" };
    } else {
      return { success: false, message: "ƒê·∫∑t l·ªãch th·∫•t b·∫°i" };
    }
  } catch (error) {
    console.error("‚ùå Error during registration:", error);

    if (error.response) {
      // Error response data logging
      console.error("‚ùå Error response status:", error.response.status);
      console.error("‚ùå Error response data:", error.response.data);
      console.error("‚ùå Error response headers:", error.response.headers);

      return {
        success: false,
        message:
          error.response.data?.message ||
          "G·ª≠i bi·ªÉu m·∫´u kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.",
      };
    }

    // If there is no response object
    return {
      success: false,
      message: "G·ª≠i bi·ªÉu m·∫´u kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.",
    };
  }
};

// export const postSchedules = async (formData) => {
//   const response = await axios.post(`${API_BASE_URL}/booking/create`, formData);

//   console.log("‚úÖ API Response Status:", response.status);
//   console.log("‚úÖ API Response Data: Booking post schedule:", response.data);

//   if (response.status >= 200 && response.status < 250) {
//     return { success: true, message: "ƒê·∫∑t l·ªãch th√†nh c√¥ng" };
//   } else {
//     return { success: false, message: "ƒê·∫∑t l·ªãch th·∫•t b·∫°i" };
//   }
// };

export const getMedicalHistory = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/medicalhistory`);
    console.log("API Response (Get BookingDetails):", response.data); // In to√†n b·ªô d·ªØ li·ªáu ng∆∞·ªùi d√πng nh·∫≠n ƒë∆∞·ª£c
    return response.data;
  } catch (error) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng");
  }
};
// payment
export const getPaymentByBookID = async (bookingId) => {
  try {
    // Hardcode d·ªØ li·ªáu thanh to√°n
    return {
      status: "Ch∆∞a thanh to√°n",
      amount: 0,
      customerId: "C001",
      bookingId: bookingId,
    };
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin thanh to√°n:", error);
    return {
      status: "Ch∆∞a thanh to√°n",
      amount: 0,
      customerId: "C001",
      bookingId: bookingId,
    };
  }
};

//
export const updateUser = async (formData) => {
  console.log("Form data being sent to API:", formData); // In d·ªØ li·ªáu g·ª≠i ƒëi
  try {
    const response = await axios.post(`${API_BASE_URL}/customer/update`, {
      customerId: formData.customerId,
      firstName: formData.firstName,
      lastName: formData.lastName,
      dob: new Date(formData.dob).toISOString().split("T")[0],
      gender: formData.gender,
      email: formData.email,
      phoneNumber: formData.phoneNumber,
      address: formData.address,
      password: formData.password,
      banking: formData.banking,
      roleId: formData.roleId,
      active: formData.active,
    });
    console.log("API Response Status:", response.status); // Status code
    console.log("API Response Data:", response.data); // D·ªØ li·ªáu tr·∫£ v·ªÅ

    if (response.status === 200) {
      return { success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" };
    } else {
      return {
        success: false,
        message: "C·∫≠p nh·∫≠t th·∫•t b·∫°i",
      };
    }
  } catch (error) {
    console.error("Error during registration:", error);

    if (error.response) {
      // In chi ti·∫øt v·ªÅ status v√† d·ªØ li·ªáu l·ªói t·ª´ backend
      console.error("Error response status:", error.response.status); // In status code
      console.error("Error response data:", error.response.data); // In d·ªØ li·ªáu l·ªói
      console.error("Error response headers:", error.response.headers); // In headers (n·∫øu c·∫ßn)

      if (error.response.data && error.response.data.message) {
        return {
          success: false,
          message: error.response.data.message,
        };
      }
    }

    return {
      success: false,
      message: "C·∫≠p nh·∫≠t kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.",
    };
  }
};

export const fetchCustomer = async (customerId) => {
  try {
    // ƒê·∫£m b·∫£o customerId ƒë∆∞·ª£c truy·ªÅn ƒë√∫ng
    const response = await axios.get(
      `${API_BASE_URL}/customer/findid?id=${customerId}`
    );
    console.log("API Response (Get Customer):", response.data);
    return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ API
  } catch (err) {
    console.error("Error fetching customer:", err);
    throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin kh√°ch h√†ng");
  }
};

export const fetchChildren = async (customerId) => {
  try {
    // ƒê·∫£m b·∫£o customerId ƒë∆∞·ª£c truy·ªÅn ƒë√∫ng
    const response = await axios.get(
      `${API_BASE_URL}/child/findbycustomer?id=${customerId}`
    );
    console.log("API Response (Get Children):", response.data);
    return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ API
  } catch (err) {
    console.error("Error fetching children:", err);
    throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin tr·∫ª em");
  }
};

export const fetchStaff = async (staffId) => {
  try {
    const response = await axios.get(
      `${API_BASE_URL}/staff/findid?id=${staffId}`
    );
    console.log("API Response (Get Staff):", response.data);
    return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ API
  } catch (err) {
    console.error("Error fetching staff:", err);
    throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin nh√¢n vi√™n");
  }
};

export const getStaffs = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/staff`);
    console.log("API Response (Get Staffs):", response.data);
    return response.data;
  } catch (error) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch nh√¢n vi√™n");
  }
};
// T·∫°o m·ªõi nh√¢n vi√™n (Staff)
export const createStaff = async (formData) => {
  console.log("Form data being sent to API (createStaff):", formData);
  try {
    const response = await axios.post(`${API_BASE_URL}/staff/create`, {
      firstName: formData.firstName,
      lastName: formData.lastName,
      phone: formData.phoneNumber, // Chuy·ªÉn t·ª´ phoneNumber sang phone
      dob: new Date(formData.dob).toISOString(), // G·ª≠i d·∫°ng ISO
      address: formData.address,
      mail: formData.email, // Chuy·ªÉn t·ª´ email sang mail
      password: formData.password,
      roleId: formData.roleId,
      active: formData.active,
    });
    console.log("API Response Status (createStaff):", response.status);
    console.log("API Response Data (createStaff):", response.data);
    if (response.status === 200) {
      return { success: true, message: "T·∫°o nh√¢n vi√™n th√†nh c√¥ng" };
    } else {
      return { success: false, message: "T·∫°o nh√¢n vi√™n th·∫•t b·∫°i" };
    }
  } catch (error) {
    console.error("Error creating staff:", error);
    if (error.response && error.response.data && error.response.data.message) {
      return { success: false, message: error.response.data.message };
    }
    return {
      success: false,
      message: "G·ª≠i bi·ªÉu m·∫´u kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.",
    };
  }
};

// C·∫≠p nh·∫≠t nh√¢n vi√™n (Staff)
export const updateStaff = async (formData) => {
  const payload = {
    staffId: formData.staffId,
    firstName: formData.firstName,
    lastName: formData.lastName,
    phone: formData.phoneNumber, // ƒê·ªïi t·ª´ phoneNumber th√†nh phone
    dob: new Date(formData.dob).toISOString(), // ƒê·ªãnh d·∫°ng ISO (VD: "1990-02-02T00:00:00.000Z")
    address: formData.address,
    mail: formData.email, // ƒê·ªïi t·ª´ email th√†nh mail
    password: formData.password,
    roleId: formData.roleId,
    active: formData.active,
  };

  console.log("Payload being sent to API (updateStaff):", payload);

  try {
    const response = await axios.post(`${API_BASE_URL}/staff/update`, payload);
    console.log("API Response Status (updateStaff):", response.status);
    console.log("API Response Data (updateStaff):", response.data);
    if (response.status === 200 || response.status === 201) {
      return { success: true, message: "C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng" };
    } else {
      return { success: false, message: "C·∫≠p nh·∫≠t nh√¢n vi√™n th·∫•t b·∫°i" };
    }
  } catch (error) {
    console.error("Error updating staff:", error);
    if (error.response && error.response.data && error.response.data.message) {
      return { success: false, message: error.response.data.message };
    }
    return {
      success: false,
      message: "C·∫≠p nh·∫≠t kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.",
    };
  }
};

// X√≥a nh√¢n vi√™n (Staff)
export const deleteStaff = async (staffId) => {
  try {
    const response = await axios.delete(`${API_BASE_URL}/staff/delete`, {
      params: { id: staffId },
    });
    console.log("API Response Status (deleteStaff):", response.status);
    console.log("API Response Data (deleteStaff):", response.data);
    if (response.status === 200 || response.status === 204) {
      return { success: true, message: "X√≥a nh√¢n vi√™n th√†nh c√¥ng" };
    } else {
      return { success: false, message: "X√≥a nh√¢n vi√™n th·∫•t b·∫°i" };
    }
  } catch (error) {
    console.error("Error deleting staff:", error);
    if (error.response && error.response.data && error.response.data.message) {
      return { success: false, message: error.response.data.message };
    }
    return {
      success: false,
      message: "Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n. Vui l√≤ng th·ª≠ l·∫°i.",
    };
  }
};

export const createChild = async (formData) => {
  try {
    console.log("Form data being sent to API (createChild):", formData);
    const response = await axios.post(`${API_BASE_URL}/child/create`, {
      customer: {
        customerId: formData.customerId, // ƒê·∫£m b·∫£o g·ª≠i customerId b√™n trong customer object
      },
      firstName: formData.firstName,
      lastName: formData.lastName,
      dob: new Date(formData.dob).toISOString().split("T")[0],
      gender: formData.gender,
      contraindications: formData.contraindications,
      active: formData.active,
    });
    console.log("API Response Status:", response.status); // Status code
    console.log("API Response Data:", response); // D·ªØ li·ªáu tr·∫£ v·ªÅ
    if (response.status === 201) {
      return { success: true, message: "T·∫°o tr·∫ª em th√†nh c√¥ng" };
    } else {
      return {
        success: false,
        message: "T·∫°o tr·∫ª em th·∫•t b·∫°i",
      };
    }
  } catch (error) {
    console.error("Error creating child:", error);
    if (error.response) {
      // In chi ti·∫øt v·ªÅ status v√† d·ªØ li·ªáu l·ªói t·ª´ backend
      console.error("Error response status:", error.response.status); // In status code
      console.error("Error response data:", error.response.data); // In d·ªØ li·ªáu l·ªói
      console.error("Error response headers:", error.response.headers); // In headers (n·∫øu c·∫ßn)
      if (error.response.data && error.response.data.message) {
        return {
          success: false,
          message: error.response.data.message,
        };
      }
    }
    return {
      success: false,
      message: "G·ª≠i bi·ªÉu m·∫´u kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.",
    };
  }
};
export const deleteUser = async (id) => {
  try {
    const response = await axios.delete(`${API_BASE_URL}/customer/delete`, {
      params: { id }, // Truy·ªÅn tham s·ªë id d∆∞·ªõi d·∫°ng query parameter
    });

    console.log("API Response Status:", response.status);
    console.log("API Response Data:", response.data);

    if (response.status === 200 || response.status === 204) {
      return { success: true, message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng" };
    } else {
      return { success: false, message: "X√≥a ng∆∞·ªùi d√πng th·∫•t b·∫°i" };
    }
  } catch (error) {
    console.error("Error deleting user:", error);

    if (error.response) {
      console.error("Error response status:", error.response.status);
      console.error("Error response data:", error.response.data);

      if (error.response.data && error.response.data.message) {
        return {
          success: false,
          message: error.response.data.message,
        };
      }
    }
    return {
      success: false,
      message: "Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i.",
    };
  }
};

export const updateChild = async (formData) => {
  try {
    // Gi·∫£ s·ª≠ BE d√πng endpoint /child/update v·ªõi method POST
    console.log("Payload being sent to API (updateChild):", formData);
    const response = await axios.post(`${API_BASE_URL}/child/update`, formData);
    console.log("API Response Status (updateChild):", response.status);
    console.log("API Response Data (updateChild):", response.data);
    if (response.status === 200 || response.status === 201) {
      return { success: true, message: "C·∫≠p nh·∫≠t tr·∫ª em th√†nh c√¥ng" };
    } else {
      return { success: false, message: "C·∫≠p nh·∫≠t tr·∫ª em th·∫•t b·∫°i" };
    }
  } catch (error) {
    console.error("Error updating child:", error);
    if (error.response && error.response.data && error.response.data.message) {
      return { success: false, message: error.response.data.message };
    }
    return {
      success: false,
      message: "C·∫≠p nh·∫≠t kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.",
    };
  }
};

// X√≥a h·ªì s∆° tr·∫ª em
export const deleteChild = async (childId) => {
  try {
    const response = await axios.delete(`${API_BASE_URL}/child/delete`, {
      params: { id: childId },
    });
    console.log("API Response Status (deleteChild):", response.status);
    console.log("API Response Data (deleteChild):", response.data);
    if (response.status === 200 || response.status === 204) {
      return { success: true, message: "X√≥a tr·∫ª em th√†nh c√¥ng" };
    } else {
      return { success: false, message: "X√≥a tr·∫ª em th·∫•t b·∫°i" };
    }
  } catch (error) {
    console.error("Error deleting child:", error);
    if (error.response && error.response.data && error.response.data.message) {
      return { success: false, message: error.response.data.message };
    }
    return {
      success: false,
      message: "Kh√¥ng th·ªÉ x√≥a tr·∫ª em. Vui l√≤ng th·ª≠ l·∫°i.",
    };
  }
};

export const getBookingByCustomer = async (customerId) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/booking/findbycustomer`, {
      params: { id: customerId },
    });
    console.log("API Response (Get Booking By Customer):", response.data);
    return response.data; // Tr·∫£ v·ªÅ m·∫£ng booking
  } catch (error) {
    console.error("Error fetching bookings:", error);
    throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ƒë·∫∑t l·ªãch");
  }
};

export const getChild = async (childId) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/child/findid`, {
      params: { id: childId },
    });
    console.log("API Response (Get Child):", response.data);
    return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ API
  } catch (error) {
    console.error("Error fetching child:", error);
    throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin tr·∫ª em"); // ƒê·∫£m b·∫£o tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
  }
};
